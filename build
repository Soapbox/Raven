#!/bin/bash

function error {
	printf "\e[31mError:\e[0m $1"
	printf "\n"
	exit 1
}

if [[ $# == 0 ]]; then
	./box build
	mv raven.phar raven
	exit
fi

# Check branch
currentBranch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$currentBranch" == "releases" ]]; then
 error "You cannot create a release of the $currentBranch branch."
fi

# Check to see if there are any local changes that will prevent switching branches
git checkout --quiet releases &> /dev/null || error "Commit any local changes before building."
git checkout --quiet $currentBranch


version=$1

# CHECK FORMAT OF THE TAG
php -r "if (preg_match('/^\d+\.\d+\.\d+(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?\$/',\$argv[1])) {
	exit(0);
} else {
	exit(1);
}" $version || error "The version '$version' is an invalid format."

# Check to see if the version is unique
existingTag=$(git tag -l | grep "^$version$")

if [[ $existingTag != "" ]]; then
	error "A release with version $version already exists."
fi

# Add the tag for the version and build the release
git tag $version
./box build
mv raven.phar raven

git checkout --quiet releases
git pull

# Add the new release to the releases folder
cp raven releases/raven-$version
git add releases/raven-$version

# Add the new release information to the manifest file
name='raven.phar'
sha=$(openssl sha1 raven | awk '{ print $2 }')
url="raven-$version"

# Add the new release info to the manifest file
php -r "file_put_contents('manifest.json', json_encode(array_merge(json_decode(file_get_contents(\"manifest.json\"), true), [[\"name\" => \"$name\", \"sha1\" => \"$sha\", \"url\" => \"$url\", \"version\" => \"$version\"]]), JSON_PRETTY_PRINT));"
git add manifest.json

git commit -m "Built version $version of raven"

git checkout --quiet $currentBranch

# Deploy the build
printf "Deploying raven-$version\n"
git push origin releases
git push origin $version
printf "Completed\n"
